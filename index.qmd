---
title: Tackling Formatted Tabular Data from Excel
subtitle: "`r verbaliseR::prettify_date('2024-07-10', uk_or_us = 'UK')`"
author: Jeremy Selva [`r fontawesome::fa(name = "linkedin", fill = "#273B8C")`](https://www.linkedin.com/in/jeremy-selva-085b9112a/){target="_blank"} <br> @JauntyJJS [`r fontawesome::fa(name = "github", fill = "#273B8C")`](https://github.com/JauntyJJS){target="_blank"} [`r fontawesome::fa(name = "twitter", fill = "#273B8C")`](https://twitter.com/JauntyJJS){target="_blank"} <br> *https://jeremy-selva.netlify.app* [`r fontawesome::fa(name = "link", fill = "#273B8C")`](https://jeremy-selva.netlify.app/){target="_blank"} <br> For useR! 2024 [`r fontawesome::fa(name = "r-project", fill = "#273B8C")`](https://events.linuxfoundation.org/user/){target="_blank"}
format:
  revealjs:
    code-line-numbers: true
    code-annotations: false
    code-overflow: scroll
    controls: true
    progress: true
    slide-number: true
    scrollable: true
    mouse-wheel: true
    highlight-style: ayu-mirage
    theme: [custom.scss]
title-slide-attributes:
    data-background-image: images/title.jpg
    data-background-size: contain
    data-background-opacity: "1"
params:
  show_table: TRUE
---

```{r}
#| label: setup
#| include: false

library(fontawesome)
library(verbaliseR)
library(readxl)

out_type <- knitr::opts_chunk$get("rmarkdown.pandoc.to")
```

# Formatted Cell in Excel {background-image="images/title.jpg" background-size="contain"}

## Formatted Cell in Excel

Formatted cells are useful for clinicians to make highlight important information. They tend to be well received by people but not so for software.

Here is one that I have made called [sample_excel.xlsx](https://raw.githubusercontent.com/JauntyJJS/useR-2024/main//sample_excel.xlsx){target="_blank"}.

![](images/peak_view.png){fig-alt="A peak view of a formatted data set." fig-align="center"}

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Formatted Cell in Excel

The column `date_issue` has two format.

:::: {.columns}

::: {.column width="50%"}

:::{.fragment}

One format is in **General**

![](images/date_format_as_general.png){fig-alt="A column named date_issue with some Excel cells formatted as General." fig-align="center"}
:::

:::

::: {.column width="50%"}

:::{.fragment}

The other format is in **Date**

![](images/date_format_as_date.png){fig-alt="A column named date_issue with some Excel cells formatted as Date." fig-align="center"}

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Formatted Cell in Excel

:::: {.columns}

::: {.column width="50%"}

:::{.fragment}

The column `colour_weight` has two colour format. 

:::

:::{.fragment}

-  Cells in **black** are weight in pounds
-  Cells in [**green**]{style="color: #00B050"} are weight in kilogram

![](images/colour_weights.png){fig-alt="A column named colour_weight with some Excel cells in black font for weight in pounds and in green font for weight in kilogram." fig-align="center"}
:::

:::

::: {.column width="50%"}

:::{.fragment}

The columns `text_integer_issue` and `text_numeric_issue` are numeric columns but some cells were formatted as text. These cells are indicated by the [**green**]{style="color: #017d01"} triangle.

![](images/text_in_numeric.png){fig-alt="Two columns named text_integer_issue and text_numeric_issue have some cells with a green triangle to indicate that the cells were formatted as text instead of numeric." fig-align="center"}
:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Formatted Cell in Excel

:::: {.columns}

::: {.column width="50%"}

The columns `numeric_integer_issue` and `one_or_zero_issue` are numeric columns.

::: {.incremental}

-  `numeric_integer_issue` has only positive integer values
-  `one_or_zero_issue` has only values 0 and 1 but has missing values on the first few hundred rows

:::

:::

::: {.column width="50%"}

![](images/numeric_columns.png){fig-alt="Two columns named numeric_integer_issue which has only positive integer values and one_or_zero_issue which has only values 0 and 1 but has missing values on the first few hundred rows." fig-align="center"}
:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

# Read Data Attempts {background-image="images/title.jpg" background-size="contain"}

## Read Data Attempt 1

We try to read the data but no warning was provided.

```{r}
#| label: read data attempt 1
#| echo: true

sample_excel_attempt_1 <- readxl::read_excel(
  path = here::here("sample_excel.xlsx"),
  sheet = "Sheet1"
)

```

![](images/peak_view.png){fig-alt="A peak view of the data set used." fig-align="center"}

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Read Data Attempt 1

:::: {.columns}

::: {.column width="50%"}

We have the following output

::: {.content-visible when-format="html"}

```{r}
#| label: sample_excel_attempt_1 html
#| eval: !expr out_type == "html"

if (params$show_table && knitr::is_html_output()) {
  sample_excel_attempt_1 |>
    reactable::reactable(
      filterable = TRUE,
      defaultPageSize = 8,
      paginationType = "jump",
      style = list(fontSize = "1rem"),
    )
}

```

:::

:::

::: {.column width="5%"}

:::

::: {.column width="45%"}

:::{.fragment fragment-index=1}
-  `date_issue`: those formatted as Date have been turned to numbers
:::
:::{.fragment fragment-index=2}
-  `colour_weight`: different colour inputs not differentiated
:::
:::{.fragment fragment-index=1}
![](images/date_format_as_date.png){fig-alt="A column named date_issue with some Excel cells formatted as Date." fig-align="center" width=90%}
:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Read Data Attempt 1

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: sample_excel_attempt_1 col type
#| echo: true

str(sample_excel_attempt_1)

```

:::

::: {.column width="5%"}

:::

::: {.column width="45%"}

:::{.fragment}

[**Good news**]{style="font-size: 150%;"}

-  `numeric_integer_issue`: column is read correctly as numeric

:::

:::{.fragment}

[**Bad news**]{style="font-size: 150%;"}

-  `text_integer_issue`: column turned to text
-  `text_numeric_issue`: column turned to text
-  `one_or_zero_issue`: column turned to logical

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Read Data Attempt 2

When we read the formatted data indicating the column types, it gives intimidating warnings.

:::: {.columns}

::: {.column width="50%"}

:::{.fragment}

::: {style="font-size: 80%;"}

- `id` as "text"
- `date_issue` as "date"
- `colour_weight` as "numeric"
- `text_integer_issue` and `text_numeric_issue` as "numeric"
- `numeric_integer_issue` and `one_or_zero_issue` as "numeric"

:::

```{r}
#| label: read data attempt 2
#| echo: true
#| eval: false

sample_excel_attempt_2 <- readxl::read_excel(
  path = here::here("sample_excel.xlsx"),
  sheet = "Sheet1",
  col_types = c("text" , "date", 
                "numeric", "numeric", 
                "numeric", "numeric", 
                "numeric")
)

```

:::

:::

::: {.column width="50%"}

:::{.fragment}

```{r}
#| label: read data attempt 2 print
#| echo: false
#| warning: true

sample_excel_attempt_2 <- readxl::read_excel(
  path = here::here("sample_excel.xlsx"),
  sheet = "Sheet1",
  col_types = c("text" , "date", 
                "numeric", "numeric", 
                "numeric", "numeric", 
                "numeric")
)

```

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Read Data Attempt 2

:::: {.columns}

::: {.column width="50%"}

We have the following output

::: {.content-visible when-format="html"}

```{r}
#| label: sample_excel_attempt_2 html
#| eval: !expr out_type == "html"

if (params$show_table && knitr::is_html_output()) {
  sample_excel_attempt_2 |>
    reactable::reactable(
      filterable = TRUE,
      defaultPageSize = 5,
      paginationType = "jump",
      style = list(fontSize = "1rem"),
    )
}

```

:::

:::

::: {.column width="5%"}

:::

::: {.column width="45%"}

:::{.fragment}

[**Good news**]{style="font-size: 150%;"}

-  `numeric_integer_issue`: column is read correctly as numeric
-  `one_or_zero_issue`: column is read correctly as numeric

:::

:::{.fragment}

[**Bad news**]{style="font-size: 150%;"}

-  `date_issue`: many rows turn to blank
-  `colour_weight`: different colour inputs not differentiated

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Reflection

From these previous failed attempt, we start to ask these questions and lose confidence in R.

:::: {.columns}

::: {.column width="50%"}

- [Does the `id` column only have unique values ?]{style="font-size: 90%;"}
- [Are numbers in characters from columns `text_integer_issue` and `text_numeric_issue` read correctly ?]{style="font-size: 90%;"}
- [Does the columns in `numeric_integer_issue` only have integer values ?]{style="font-size: 90%;"}
- [Does the columns in `one_or_zero_issue` only have values 0 or 1 ?]{style="font-size: 90%;"}
- [Can we fix `date_issue` ?]{style="font-size: 90%;"}
- [Can we fix `colour_weight` ?]{style="font-size: 90%;"}

:::

::: {.column width="50%"}
![](images/no_idea.jpg){fig-alt="Image of a businessman sitting at office and feeling dull because lack of idea." fig-align="center" width="110%"}

:::

::::

::: footer

Businessman sitting at office and feeling dull because lack of idea by [Amonrat Rungreangfangsai](https://www.vecteezy.com/vector-art/464584-business-man-sitting-at-office-and-feeling-dull-because-lack-of-idea-to-work){target="_blank"}

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Reflection

We can resort to manual checking/fixing of formatted cells in excel sheets. However, we can't be doing this for hundreds of rows all the times. 

:::{.fragment fragment-index=1}

Thankfully, there are some R packages ([***pointblank***](https://rstudio.github.io/pointblank/){target="_blank"}, [***collateral***](https://collateral.jamesgoldie.dev/){target="_blank"}, [***tidyxl***](https://nacnudus.github.io/tidyxl/index.html){target="_blank"}) that can help

:::

:::: {.columns}

::: {.column width="50%"}
![](images/manual_cleaning.jpg){fig-alt="Image of a businessman cleaning up." fig-align="center"}
:::

::: {.column width="50%"}

:::{.fragment fragment-index=1}

![](images/packages.png){fig-alt="Image of R pacakges pointblank, collateral and tidyxl." fig-align="center"}
:::

:::

::::

::: footer

Wind-up businessman image by [Amonrat Rungreangfangsai](https://www.vecteezy.com/vector-art/464469-wind-up-businessman-end-of-energy-and-stop-working){target="_blank"}

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Read Data Attempt 3

We read the excel sheet again with the following `col_type` and deal with each column one at a time.

- `id` as "text"
- `date_issue` as "list"
- ~~`colour_weight \r\nBlack in pounds\r\nGreen in kilograms` as "text"~~ 
- `text_integer_issue` and `text_numeric_issue` as "text"
- `numeric_integer_issue` and `one_or_zero_issue` as "numeric"

```{r}
#| label: sample_excel_attempt_3
#| echo: true
#| eval: true

sample_excel_attempt_3 <- readxl::read_excel(
  path = here::here("sample_excel.xlsx"),
  sheet = "Sheet1",
  col_types = c("text" , "list", 
                "text", "text", "text", 
                "numeric", "numeric")
)

```

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

# Does the `id` column only have unique values ? {background-image="images/title.jpg" background-size="contain"}

## Does the `id` column only have unique values ?

Use [***pointblank::rows_distinct***](https://rstudio.github.io/pointblank/reference/rows_distinct.html) to validate columns that needs to have unique values.

:::: {.columns}

::: {.column width="50%"}

::: {.fragment}

```{r}
#| label: rows_distinct good example
#| echo: true
#| eval: true


data.frame(id = c("ID_01", "ID_02")) |> 
  pointblank::rows_distinct(columns = "id" )

```

:::

::: {.fragment}

```{r}
#| label: rows_distinct bad example
#| echo: true
#| eval: true
#| error: true
#| output-location: fragment

data.frame(id = c("ID_01", "ID_02", "ID_01")) |> 
  pointblank::rows_distinct(columns = "id" )

```

:::

:::

::: {.column width="50%"}

::: {.fragment}

```{r}
#| label: rows_distinct data example
#| echo: true
#| eval: true

id_check <- sample_excel_attempt_3 |> 
  dplyr::select("id") |> 
  pointblank::rows_distinct(columns = "id" )

```

```{r}
#| label: rows_distinct data print
#| eval: true

id_check |>
  reactable::reactable(
    filterable = TRUE,
    defaultPageSize = 5,
    paginationType = "jump",
      style = list(fontSize = "1rem")
  )
  
```

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

# Are numbers in characters from columns `text_integer_issue` and `text_numeric_issue` read correctly ? {background-image="images/title.jpg" background-size="contain"}

## [Are numbers in characters from columns `text_integer_issue` and `text_numeric_issue` read correctly ?]{.r-fit-text}

:::: {.columns}

::: {.column width="80%"}

In sample_excel_attempt_2, when we read `text_integer_issue` as a numeric column, we received some warning message..

-  Warning: Coercing text to numeric in D3 / R3C4: '54'
-  Warning: Coercing text to numeric in D7 / R7C4: '33'

The warnings inform the user that it sees "54" and "33" in cells D3 and D7 respectively as "text" and it is forced to be converted to numeric

:::

::: {.column width="20%"}

![](images/text_integer_issue.png){fig-alt="Image showing 54 and 33 in cells D3 and D7 respectively as text." fig-align="center" width="90%"}

:::

::::

::: {.fragment}

::: {.callout-important}
## [Important]{style="font-size: 150%;"}
[It may be safer to check if the column truly contain only positive integers even though they are in text, rather than relying on long warning messages.]{style="font-size: 150%;"}
:::

:::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## [Are numbers in characters from columns `text_integer_issue` and `text_numeric_issue` read correctly ?]{.r-fit-text}

Use [***pointblank::col_vals_regex***](https://rstudio.github.io/pointblank/reference/col_vals_regex.html){target="_blank"} and [***pointblank::col_vals_gt***](https://rstudio.github.io/pointblank/reference/col_vals_gt.html){target="_blank"} to ensure that text in the column `text_integer_issue` are positive integers.

:::: {.columns}

::: {.column width="50%"}

:::{.fragment fragment-index=1}

```{r}
#| label: positive integer in text check success
#| echo: true
#| eval: true
#| error: true

data.frame(integer_data = c("1", "2.0000", "59", NA)) |> 
  pointblank::col_vals_regex(
    columns = c("integer_data"),
    regex = "^[1-9]([0-9]+)?(.[0]+)?$",
    na_pass = TRUE,
  ) 
  
```

:::

:::{.fragment fragment-index=3}

```{r}
#| label: positive integer check success
#| echo: true
#| eval: true
#| error: true

data.frame(integer_data = c(1, 2, 3, NA)) |> 
  pointblank::col_vals_gt(
    columns = c("integer_data"),
    value = 0,
    na_pass = TRUE,    
  )
  
```

:::

:::

::: {.column width="50%"}

:::{.fragment fragment-index=2}

```{r}
#| label: positive integer in text check fail
#| echo: true
#| eval: true
#| error: true

data.frame(integer_data = c("1", "2.0000", "2.1")) |> 
  pointblank::col_vals_regex(
    columns = c("integer_data"),
    regex = "^[1-9]([0-9]+)?(.[0]+)?$",
    na_pass = TRUE,
  ) 
  
```

:::

:::{.fragment fragment-index=4}

```{r}
#| label: positive integer check fail
#| echo: true
#| eval: true
#| error: true

data.frame(integer_data = c(-1, 0, 1, 2)) |> 
  pointblank::col_vals_gt(
    columns = c("integer_data"),
    value = 0,
    na_pass = TRUE,    
  )
  
```

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## [Are numbers in characters from columns `text_integer_issue` and `text_numeric_issue` read correctly ?]{.r-fit-text}

Similarly, we can use the same functions [***pointblank::col_vals_regex***](https://rstudio.github.io/pointblank/reference/col_vals_regex.html){target="_blank"} and [***pointblank::col_vals_gt***](https://rstudio.github.io/pointblank/reference/col_vals_gt.html){target="_blank"} to ensure that the text in the column `text_numeric_issue` are positive numbers.

::: {.fragment}

```{r}
#| label: positive number in text check success
#| echo: true
#| eval: true
#| error: true

data.frame(numeric_data = c("0.140", "7.07E-2", "2", NA)) |> 
  pointblank::col_vals_regex(
    columns = c("numeric_data"),
    regex = "^[0-9]+((.[0-9]+)?(E(-)?[0-9]+)?)?$",
    na_pass = TRUE,
  ) 
  
```

:::

::: {.fragment}

```{r}
#| label: positive number in text check fail
#| echo: true
#| eval: true
#| error: true

data.frame(numeric_data = c("not numeric", FALSE, "", 2)) |> 
  pointblank::col_vals_regex(
    columns = c("numeric_data"),
    regex = "^[0-9]+((.[0-9]+)?(E(-)?[0-9]+)?)?$",
    na_pass = TRUE,
  ) 
  
```

:::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## [Are numbers in characters from columns `text_integer_issue` and `text_numeric_issue` read correctly ?]{.r-fit-text}

Continue with `sample_excel_attempt_3` which reads `text_integer_issue` and `text_numeric_issue` column as text.

::: {.panel-tabset}

### text_integer_issue

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: integer check
#| echo: true
#| eval: true

integer_check_from_text <- sample_excel_attempt_3 |> 
  dplyr::select(c("id","text_integer_issue")) |> 
  pointblank::col_vals_regex(
    columns = c("text_integer_issue"),
    regex = "^[1-9]([0-9]+)?(.[0]+)?$",
    na_pass = TRUE,
  ) |> 
  dplyr::mutate(
    text_integer_issue = as.integer(.data[["text_integer_issue"]])
  ) |> 
  pointblank::col_vals_gt(
    columns = c("text_integer_issue"),
    value = 0,
    na_pass = TRUE,    
  ) |> 
  dplyr::rename(
    text_integer_verified = "text_integer_issue"
  )
  
```

:::

::: {.column width="50%"}

```{r}
#| label: integer check print
#| eval: true

integer_check_from_text |>
  reactable::reactable(
    filterable = TRUE,
    defaultPageSize = 5,
    paginationType = "jump",
      style = list(fontSize = "1rem")
  )
  
```

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

### text_numeric_issue

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: numeric check
#| echo: true
#| eval: true

numeric_check <- sample_excel_attempt_3 |> 
  dplyr::select(c("id","text_numeric_issue")) |> 
  pointblank::col_vals_regex(
    columns = c("text_numeric_issue"),
    regex = "^[0-9]+((.[0-9]+)?(E(-)?[0-9]+)?)?$",
    na_pass = TRUE,
  ) |> 
  dplyr::mutate(
    text_numeric_issue = as.numeric(.data[["text_numeric_issue"]])
  ) |> 
  pointblank::col_vals_gt(
    columns = c("text_numeric_issue"),
    value = 0,
    na_pass = TRUE,    
  ) |> 
  dplyr::rename(
    text_numeric_verified = "text_numeric_issue"
  )
  
```

:::

::: {.column width="50%"}

```{r}
#| label: numeric check print
#| eval: true

numeric_check |>
  reactable::reactable(
    filterable = TRUE,
    defaultPageSize = 5,
    paginationType = "jump",
      style = list(fontSize = "1rem")
  )
  
```

:::

::::

:::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

# Does the columns in `numeric_integer_issue` only have integer values ? {background-image="images/title.jpg" background-size="contain"}

## [Does the columns in `numeric_integer_issue` only have integer values ?]{.r-fit-text}

:::: {.columns}

::: {.column width="50%"}

It may be necessary to check if a numeric column only has integers.

However, we also cannot use [***pointblank::col_vals_regex***](https://rstudio.github.io/pointblank/reference/col_vals_regex.html){target="_blank"} because the column is not read in text.

:::{.fragment fragment-index=1}

We create the function `is_integer_vector` that returns `FALSE` when at least one of its element is not an integer.

:::

:::

::: {.column width="50%"}

:::{.fragment fragment-index=1}

```{r}
#| label: only integers in numeric vector check
#| echo: true
#| eval: true
#| code-line-numbers: "|28-37"

is_integer_value <- function(input_value,
                             allow_na = FALSE) {

  boolean_result <- FALSE

  # When input value is NA
  if (is.na(input_value)) {
    if (isTRUE(allow_na)) {
      boolean_result <- TRUE
      return(boolean_result)
    } else {
      return(boolean_result)
    }
  }

  # When input value is not numeric
  if (isTRUE(!is.numeric(input_value))) {
    return(boolean_result)
  }

  # When input value is numeric
  boolean_result <- isTRUE(input_value %% 1 == 0)

  return(boolean_result)
}


is_integer_vector <- function(input_vector,
                              allow_na = FALSE) {

  boolean_results <- input_vector |>
    purrr::map_lgl(
      .f = is_integer_value,
      allow_na = allow_na
    )
  return(boolean_results)
}


```

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## [Does the columns in `numeric_integer_issue` only have integer values ?]{.r-fit-text}

Similarly, we can use [***pointblank::col_vals_expr***](https://rstudio.github.io/pointblank/reference/col_vals_expr.html){target="_blank"} to ensure that the numeric column has only integer using the self-made `is_integer_vector` function.

:::: {.columns}

::: {.column width="50%"}

::: {.fragment}

```{r}
#| label: integer check fail success
#| echo: true
#| eval: true

integer_data <- data.frame(
  integer_col = c(-1, 0, NA, 2.0000, 3)
)

integer_data |> 
  pointblank::col_vals_expr(
    expr = ~is_integer_vector(
      input_vector = integer_data[["integer_col"]],
      allow_na = TRUE)
  )
  
```

:::

:::

::: {.column width="50%"}

::: {.fragment}

```{r}
#| label: integer check fail 
#| echo: true
#| eval: true
#| error: true

non_integer_data <- data.frame(
  non_integer_col = c(-1, 0, NA, 2.0000, 
                      3.010, pi, exp(1)
                     )
) 

non_integer_data |> 
  pointblank::col_vals_expr(
    expr = ~ is_integer_vector(
      input_vector = non_integer_data[["non_integer_col"]],
      allow_na = TRUE)
  )
  
```

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## [Does the columns in `numeric_integer_issue` only have integer values ?]{.r-fit-text}

Continue with `sample_excel_attempt_3` which reads `numeric_integer_issue` column as numeric. We apply the `is_integer_vector` function on the `numeric_integer_issue` column before converting the column to an integer column.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: integer check from numeric
#| echo: true
#| eval: true

integer_check_from_numeric <- sample_excel_attempt_3 |> 
  dplyr::select(c("id","numeric_integer_issue")) |> 
  pointblank::col_vals_expr(
    expr = ~ is_integer_vector(
      input_vector = sample_excel_attempt_3[["numeric_integer_issue"]],
      allow_na = TRUE)
  ) |> 
  dplyr::mutate(
    numeric_integer_issue = as.integer(.data[["numeric_integer_issue"]]),
  ) |> 
  dplyr::rename(
    numeric_integer_verified = "numeric_integer_issue"
  )
  
  
```

:::

::: {.column width="50%"}

```{r}
#| label: integer_check_from_numeric print
#| eval: true

integer_check_from_numeric |>
  reactable::reactable(
    filterable = TRUE,
    defaultPageSize = 5,
    paginationType = "jump",
      style = list(fontSize = "1rem")
  )
  
```

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

# Does the columns in `one_or_zero_issue` only have values 0 or 1 ? {background-image="images/title.jpg" background-size="contain"}

## [Does the columns in `one_or_zero_issue` only have values 0 or 1 ?]{.r-fit-text}

[Use [***pointblank::test_col_vals_in_set***](https://rstudio.github.io/pointblank/reference/col_vals_in_set.html){target="_blank"} to ensure that the column only contains values from a user-defined set.]{style="font-size: 90%;"}

:::: {.columns}

::: {.column width="50%"}

::: {.fragment}

```{r}
#| label: one or zero check success
#| echo: true
#| eval: true
#| error: true

data.frame(one_or_zero_data = c(0, NA, 1)) |> 
  pointblank::col_vals_in_set(
    columns = c("one_or_zero_data"),
    set = c(NA, 0, 1)
  ) 
  
```

:::

::: {.fragment}

```{r}
#| label: one or zero check fail
#| echo: true
#| eval: true
#| error: true

data.frame(one_or_zero_data = c(0, NA, 1, 2)) |> 
  pointblank::col_vals_in_set(
    columns = c("one_or_zero_data"),
    set = c(NA, 0, 1)
  ) 
  
```

:::

:::

::: {.column width="50%"}

::: {.fragment}

```{r}
#| label: one or zero check
#| echo: true
#| eval: true

one_or_zero_check <- sample_excel_attempt_3 |> 
  dplyr::select(c("id","one_or_zero_issue")) |> 
  pointblank::col_vals_in_set(
    columns = c("one_or_zero_issue"),
    set = c(NA, 0, 1)
  ) |> 
  dplyr::rename(
    one_or_zero_verified = "one_or_zero_issue"
  )
  
  
```

```{r}
#| label: one or zero check print
#| eval: true

one_or_zero_check |>
  reactable::reactable(
    filterable = TRUE,
    defaultPageSize = 5,
    paginationType = "jump",
      style = list(fontSize = "1rem")
  )
  
  
```

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

# Can we fix `date_issue` ? {background-image="images/title.jpg" background-size="contain"}

## Can we fix `date_issue` ?

First, convert the date columns into a list of character, `Date` and logical vectors so that I preserve both the text and date format.

:::: {.columns}

::: {.column width="50%"}

::: {.fragment}

```{r}
#| label: col_type to list
#| echo: true
#| eval: true

sample_excel_attempt_3 <- readxl::read_excel(
  path = here::here("sample_excel.xlsx"),
  sheet = "Sheet1",
  col_types = c("text" , "list", 
                "text", "text", "text", 
                "numeric", "numeric")
) |> 
  pointblank::rows_distinct(columns = "id" )


str(head(sample_excel_attempt_3$date_issue))

```

:::

:::

::: {.column width="50%"}

::: {.fragment}

::: {.content-visible when-format="html"}

```{r}
#| label: sample_excel_attempt_3 html
#| eval: !expr out_type == "html"

if (params$show_table && knitr::is_html_output()) {
  sample_excel_attempt_3 |>
    reactable::reactable(
      filterable = TRUE,
      defaultPageSize = 5,
      paginationType = "jump",
      style = list(fontSize = "1rem")
    )
}

```

:::

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `date_issue` ?

Next I create a function that convert dates in character vectors into `Date` objects, convert logical vector to `NA` and convert `Date` vectors into the date format that I want.

```{r}
#| label: convert_dmy_text_to_date
#| echo: true
#| eval: true

convert_dmy_text_to_date <- function(input) {
  if (length(class(input)) == 1) {
    if (class(input) == "character") {
      return(as.Date.character(lubridate::dmy(input)))
    } else if (class(input) == "logical") {
      return(NA)
    }
  }
  return(lubridate::as_date(lubridate::ymd(input)))
}

```

::: {.fragment}

::: {.callout-tip}
## [Tip]{style="font-size: 150%;"}
[However, creating function can lead to unexpected warnings and errors. To view these issues, I use some functions from the [***collateral***](https://collateral.jamesgoldie.dev/){target="_blank"} R package.]{style="font-size: 150%;" target="_blank"}
:::

-  [***collateral::map_peacefully***](https://collateral.jamesgoldie.dev/reference/collateral_mappers){target="_blank"}
-  [***collateral::has_warnings***](https://collateral.jamesgoldie.dev/reference/has){target="_blank"} and [***collateral::has_errors***](https://collateral.jamesgoldie.dev/reference/has){target="_blank"}

:::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `date_issue` ?

Use [***collateral::map_peacefully***](https://collateral.jamesgoldie.dev/reference/collateral_mappers){target="_blank"} to capture function side effects using both [***purrr::safely()***](https://purrr.tidyverse.org/reference/safely.html){target="_blank"} and [***purrr::quietly()***](https://purrr.tidyverse.org/reference/quietly.html){target="_blank"}.

::: {.fragment}

```{r}
#| label: get fixed_date
#| echo: true
#| eval: true
#| code-line-numbers: "|3-12"
#| output-location: fragment

fixed_date <- sample_excel_attempt_3 |>
  dplyr::select(c("id","date_issue")) |> 
  dplyr::mutate(
    converted_date_log = collateral::map_peacefully(
      .x = .data[["date_issue"]],
      .f = convert_dmy_text_to_date
    ),
    converted_date = purrr::map_vec(
      .x = .data[["converted_date_log"]], 
      .f = "result"
    )
  )

print(head(fixed_date))
```

:::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `date_issue` ?

[Use [***collateral::has_warnings***](https://collateral.jamesgoldie.dev/reference/has){target="_blank"} and [***collateral::has_errors***](https://collateral.jamesgoldie.dev/reference/has){target="_blank"} to create logical columns which gives `TRUE` when there are warning or error messages.]{.fragment fragment-index=1} [Use [***pointblank::test_col_vals_in_set***](https://rstudio.github.io/pointblank/reference/col_vals_in_set.html){target="_blank"} to obtain a single logical value.]{.fragment fragment-index=2}

::: {.fragment fragment-index=1}

```{r}
#| label: get collateral warnings and errors as logical
#| echo: true
#| eval: true

fixed_date <- fixed_date |>
  dplyr::mutate(
    warning_check = collateral::has_warnings(.data[["converted_date_log"]]),
    error_check = collateral::has_errors(.data[["converted_date_log"]])
  )

print(head(fixed_date))
```

:::

::: {.fragment fragment-index=2}

```{r}
#| label: check for date issues
#| echo: true
#| eval: true

no_issue <- fixed_date |>
  pointblank::test_col_vals_in_set(
    columns = c("warning_check", "error_check"),
    set = c(FALSE)    
  )

print(no_issue)
```

:::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `date_issue` ?

Isolate rows with issues and output the warning and error messages.

```{r}
#| label: isolate issues
#| echo: true
#| eval: true
#| code-line-numbers: "|6-15"
#| output-location: column

if (!isTRUE(no_issue)) {
  fixed_date |>
    dplyr::filter(
      warning_check == TRUE | error_check == TRUE
    ) |> 
    dplyr::mutate(
      warning_log = purrr::map(
        .x = .data[["converted_date_log"]],
        .f = "warnings",
        .null = NA),
      error_log = purrr::map(
        .x = .data[["converted_date_log"]],
        .f = "errors",
        .null = NA)   
    ) |> 
    reactable::reactable(
      style = list(fontSize = "1rem")
    )
}
```

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `date_issue` ?

Correct the invalid dates accordingly and rerun everything. We just assume that 32/1/2017 was supposed to be 31/1/2017.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: fix date
#| echo: true
#| eval: true

fixed_date <- sample_excel_attempt_3 |> 
  dplyr::select(c("id","date_issue")) |> 
  dplyr::mutate(
    date_issue = dplyr::case_when(
      (.data[["id"]] == "ID0004" & 
       .data[["date_issue"]] == "32/1/2017"
      ) ~ list(c("31/1/2017")),
      .default = .data[["date_issue"]]
    ) 
  ) |> 
  dplyr::mutate(
    converted_date_log = collateral::map_peacefully(
      .x = .data[["date_issue"]],
      .f = convert_dmy_text_to_date
    ),
    converted_date = purrr::map_vec(
      .x = .data[["converted_date_log"]], 
      .f = "result"
    ),
    warning_check = collateral::has_warnings(.data[["converted_date_log"]]),
    error_check = collateral::has_errors(.data[["converted_date_log"]]),

  ) |>
  pointblank::col_vals_in_set(
    columns = c("warning_check", "error_check"),
    set = c(FALSE)    
  ) |> 
  dplyr::select(
    c("id", "converted_date")
  ) |> 
  dplyr::rename(
    date_fixed_yyyy_mm_dd = "converted_date"
  )


```

:::

::: {.column width="50%"}

::: {.content-visible when-format="html"}

```{r}
#| label: fix date html
#| eval: !expr out_type == "html"

if (params$show_table && knitr::is_html_output()) {
  fixed_date |>
    reactable::reactable(
      filterable = TRUE,
      defaultPageSize = 5,
      paginationType = "jump",
      style = list(fontSize = "1rem")
    )
}

```

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

# Can we fix `colour_weight` ? {background-image="images/title.jpg" background-size="contain"}

## Can we fix `colour_weight` ?

Use [***tidyxl::xlsx_cells***](https://nacnudus.github.io/tidyxl/reference/xlsx_cells.html){target="_blank"} to read the excel file in cells.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: read cells
#| echo: true
#| eval: true

cells <- tidyxl::xlsx_cells(
  path = here::here("sample_excel.xlsx"),
  sheet = "Sheet1",
  include_blank_cells = TRUE)

```

::: {.fragment}
Observe that there is no indication of which row is [**green**]{style="color: #00B050"} or **black**. 

We are only provided the `local_format_id` labelled 1 to 15 at the last column.
:::

:::

::: {.column width="5%"}

:::

::: {.column width="45%"}

::: {.content-visible when-format="html"}

```{r}
#| label: read cells html
#| eval: !expr out_type == "html"

if (params$show_table && knitr::is_html_output()) {
  cells |>
    reactable::reactable(
      filterable = TRUE,
      defaultPageSize = 5,
      paginationType = "jump",
      style = list(fontSize = "1rem")
    )
}

```

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `colour_weight` ?

Use [***tidyxl::xlsx_formats***](https://nacnudus.github.io/tidyxl/reference/xlsx_formats.html){target="_blank"} to obtain the format information of the excel file in a list.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: read formats
#| echo: true
#| eval: true

formats <- tidyxl::xlsx_formats(
  path = here::here("sample_excel.xlsx")
)

```

::: {.fragment}

Here is a way to view all colours in Hex8 used for all 15 `local_format_id`

```{r}
#| label: view all colours
#| echo: true
#| eval: true

print(formats$local$font$color$rgb)

unique(formats$local$font$color$rgb)

```

:::

::: {.fragment}

We need to identify which one is **black** and [**green**]{style="color: #00B050"}.

:::

:::

::: {.column width="50%"}

```{r}
#| label: print formats
#| eval: true

formats

```

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `colour_weight` ?

:::: {.columns}

::: {.column width="50%"}

::: {.fragment}

Using green as the running example, first in excel, click on a cell with [**green**]{style="color: #00B050"} font. Next, click on the drop down button beside the font colour button.

![](images/font_dropdown.png){fig-alt="Figure showing where the drop down button beside the font colour button is." fig-align="center"}

:::

:::

::: {.column width="50%"}

::: {.fragment}

This will give the following output. Next click on More Colors...

![](images/more_colours.png){fig-alt="Figure showing where the More Colors... button is." fig-align="center"}
:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `colour_weight` ?

:::: {.columns}

::: {.column width="50%"}

::: {.fragment}

Go to the Custom tab and extract the hex code saying #00B050 for [**green**]{style="color: #00B050"}. 

![](images/green_hex_code.png){fig-alt="Figure showing how to get the Hex code." fig-align="center"}
:::

:::

::: {.column width="50%"}

::: {.fragment}

Next, use https://www.schemecolor.com/?getcolor={hex code} (<https://www.schemecolor.com/sample?getcolor=00B050>{target="_blank"} in our running example) to find out what the Hex8 code is for the [**green**]{style="color: #00B050"} font.

![](images/green_hex8_code.png){fig-alt="Figure showing how to get the Hex8 code from www.schemecolor.com." fig-align="center"}

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `colour_weight` ?

::: {.fragment}

Identify the `local_format_id` accordingly with the **black** and [**green**]{style="color: #00B050"} Hex8 code as **#FF000000** and [**#FF00B050**]{style="color: #00B050"} respectively.

```{r}
#| label: green font local format id 
#| echo: true
#| eval: true

green_font_local_format_id <- which(formats$local$font$color$rgb == "FF00B050")
green_font_local_format_id

```

```{r}
#| label: black font local format id 
#| echo: true
#| eval: true

black_font_local_format_id <- which(formats$local$font$color$rgb == "FF000000")
black_font_local_format_id
```

:::

::: {.fragment}

Identify the column index of `colour_weight_black_in_pounds_green_in_kilograms`. [***pointblank::row_count_match***](https://rstudio.github.io/pointblank/reference/row_count_match.html){target="_blank"} is used to ensure we have only one row left after filtering.

```{r}
#| label: weight column index
#| echo: true
#| eval: true

weight_column_index <- cells |> 
  dplyr::filter(
    .data[["character"]] == "colour_weight \r\nBlack in pounds\r\nGreen in kilograms"
  ) |> 
  pointblank::row_count_match(count = 1) |> 
  dplyr::pull(.data[["col"]])

weight_column_index
```

:::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `colour_weight` ?

With the column index and `local_format_id` identified, we can filter the `cells` data to isolate cells which contain the weight in pounds.

:::: {.columns}

::: {.column width="50%"}

::: {.content-visible when-format="html"}

```{r}
#| label: recall cells html
#| eval: !expr out_type == "html"

if (params$show_table && knitr::is_html_output()) {
  cells |>
    reactable::reactable(
      filterable = TRUE,
      defaultPageSize = 5,
      paginationType = "jump",
      style = list(fontSize = "1rem")
    )
}

```

:::

:::

::: {.column width="50%"}

::: {.fragment}

```{r}
#| label: weight in pounds 
#| echo: true
#| eval: true

weight_in_pounds <- cells |>
  dplyr::filter(.data[["row"]] != 1) |> 
  dplyr::filter(.data[["col"]] == weight_column_index) |> 
  dplyr::filter(.data[["local_format_id"]] %in% black_font_local_format_id) |> 
  pointblank::col_vals_in_set(columns = c("data_type"), set = c("numeric")) |>   
  dplyr::filter(.data[["data_type"]] == "numeric") |>  
  dplyr::select(c("row", "numeric")) |> 
  dplyr::rename(weight_pounds = "numeric") |> 
  dplyr::mutate(
    weight_kg_converted = janitor::round_half_up(.data[["weight_pounds"]] / 2.2046, digits = 0)
  )

```

```{r}
#| label: weight pounds html
#| code-fold: true

weight_in_pounds |>
  reactable::reactable(
    filterable = TRUE,
    defaultPageSize = 5,
    paginationType = "jump",
      style = list(fontSize = "1rem")
  )


```

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `colour_weight` ?

With the column index and `local_format_id` identified, we can filter the `cells` data to isolate cells which contain the weight in kilogram.

:::: {.columns}

::: {.column width="50%"}

::: {.content-visible when-format="html"}

```{r}
#| label: recall cells html 2
#| eval: !expr out_type == "html"

if (params$show_table && knitr::is_html_output()) {
  cells |>
    reactable::reactable(
      filterable = TRUE,
      defaultPageSize = 5,
      paginationType = "jump",
      style = list(fontSize = "1rem")
    )
}

```

:::

:::

::: {.column width="50%"}

::: {.fragment}

```{r}
#| label: weight in kg
#| echo: true
#| eval: true

weight_in_kg <- cells |>
  dplyr::filter(.data[["row"]] != 1) |> 
  dplyr::filter(.data[["col"]] == weight_column_index) |> 
  dplyr::filter(.data[["local_format_id"]] %in% green_font_local_format_id) |> 
  pointblank::col_vals_in_set(
    columns = c("data_type"),
    set = c("numeric")    
  ) |>  
  dplyr::filter(.data[["data_type"]] == "numeric") |>  
  dplyr::select(c("row", "numeric")) |> 
  dplyr::rename(weight_kg = "numeric")

```

```{r}
#| label: weight in kg html

weight_in_kg |>
  reactable::reactable(
    filterable = TRUE,
    defaultPageSize = 5,
    paginationType = "jump",
      style = list(fontSize = "1rem")
  )


```

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `colour_weight` ?

We need to extract the `id` column from `cells` 

:::: {.columns}

::: {.column width="50%"}

::: {.content-visible when-format="html"}

```{r}
#| label: recall cells html 3
#| eval: !expr out_type == "html"

if (params$show_table && knitr::is_html_output()) {
  cells |>
    reactable::reactable(
      filterable = TRUE,
      defaultPageSize = 5,
      paginationType = "jump",
      style = list(fontSize = "1rem")
    )
}

```

:::

:::

::: {.column width="50%"}
::: {.fragment}
```{r}
#| label: get id from cells
#| echo: true
#| eval: true

id_column_index <- which(
  colnames(sample_excel_attempt_3) == "id"
)

id_cells <- cells |>
  dplyr::filter(.data[["row"]] != 1) |> 
  dplyr::filter(.data[["col"]] == id_column_index) |>
  pointblank::col_vals_in_set(
    columns = c("data_type"),
    set = c("character")
  ) |> 
  dplyr::select(c("row", "character")) |> 
  dplyr::rename(id = "character") 

```

```{r}
#| label: get id from cells html

id_cells |>
  reactable::reactable(
    filterable = TRUE,
    defaultPageSize = 5,
    paginationType = "jump",
      style = list(fontSize = "1rem")
  )


```

:::

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Can we fix `colour_weight` ?

We combine the weight data together

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: combine weights
#| echo: true
#| eval: true

fixed_weight <- id_cells |> 
  dplyr::left_join(weight_in_pounds, 
                   by = dplyr::join_by("row"),
                   unmatched = "error",
                   relationship = "one-to-one") |> 
  dplyr::left_join(weight_in_kg, 
                   by = dplyr::join_by("row"),
                   unmatched = "error",
                   relationship = "one-to-one") |> 
  tidyr::unite(
    col = "weight_fixed_kg",
    c("weight_kg_converted",
      "weight_kg"),
    remove = TRUE,
    na.rm = TRUE) |> 
  dplyr::select(c("id", "weight_fixed_kg"))

```

:::

::: {.column width="50%"}

```{r}
#| label: fixed weight before html

fixed_weight |>
  reactable::reactable(
    filterable = TRUE,
    defaultPageSize = 5,
    paginationType = "jump",
      style = list(fontSize = "1rem")
  )


```

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

# Wrapping up {background-image="images/title.jpg" background-size="contain"}

## Wrapping up

We combine all fixed and verified columns together

:::: {.columns}

::: {.column width="50%"}

![](images/before.png){fig-alt="A peak view of the first three columns of a formatted data set." fig-align="center"}
![](images/before_last.png){fig-alt="A peak view of the last three columns of formatted data set." fig-align="center"}

:::

::: {.column width="50%"}

```{r}
#| label: combine all columns
#| echo: true
#| eval: true
#| code-fold: true
#| class-source: custom_pre_sourceCode_code

cleaned_data <- sample_excel_attempt_3 |> 
  dplyr::select("id") |> 
  dplyr::left_join(fixed_date, 
                   by = dplyr::join_by("id"),
                   unmatched = "error",
                   relationship = "one-to-one") |> 
  dplyr::left_join(fixed_weight, 
                   by = dplyr::join_by("id"),
                   unmatched = "error",
                   relationship = "one-to-one") |> 
  dplyr::left_join(integer_check_from_text, 
                   by = dplyr::join_by("id"),
                   unmatched = "error",
                   relationship = "one-to-one") |> 
  dplyr::left_join(numeric_check, 
                   by = dplyr::join_by("id"),
                   unmatched = "error",
                   relationship = "one-to-one") |> 
  dplyr::left_join(integer_check_from_numeric, 
                   by = dplyr::join_by("id"),
                   unmatched = "error",
                   relationship = "one-to-one") |> 
  dplyr::left_join(one_or_zero_check, 
                   by = dplyr::join_by("id"),
                   unmatched = "error",
                   relationship = "one-to-one")


```

```{r}
#| label: cleaned_data html

cleaned_data |>
  reactable::reactable(
    filterable = TRUE,
    defaultPageSize = 5,
    paginationType = "jump",
      style = list(fontSize = "1rem")
  )


```

:::

::::

::: footer

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::

## Wrapping up

::: {style="font-size: 90%;"}

R packages ([***pointblank***](https://rstudio.github.io/pointblank/){target="_blank"}, [***collateral***](https://collateral.jamesgoldie.dev/){target="_blank"}, [***tidyxl***](https://nacnudus.github.io/tidyxl/index.html){target="_blank"}) can help to validate and tackle some problematic formatted columns in Excel, without resorting to too much manual work.

However, we can see that tidying up formatted Excel files remains challenging, even with [***R***](https://www.r-project.org/){target="_blank"}. Hope that this presentation can encourage others to persevere and strive to find/share alternative ways.

:::

:::: {.columns}

::: {.column width="50%"}

![](images/packages.png){fig-alt="Image of R pacakges pointblank, collateral and tidyxl." fig-align="center" width="100%"}

:::

::: {.column width="50%"}
![](images/success.jpg){fig-alt="Image of a businessman sitting at stack of books, read a book and dreaming about success." fig-align="center" width="100%"}

:::

::::

::: footer

Businessman sitting at stack of books, read a book and dreaming about success by [Amonrat Rungreangfangsai](https://www.vecteezy.com/vector-art/464918-businessman-sit-at-stack-of-books-read-a-book-and-dreaming-about-success){target="_blank"}

https://jauntyjjs.github.io/useR-2024
[`r fontawesome::fa(name = "link")`](https://jauntyjjs.github.io/useR-2024/){target="_blank"} [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS/useR-2024){target="_blank"}

:::
